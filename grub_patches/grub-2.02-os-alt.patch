diff --git a/grub2/util/grub.d/10_linux.in b/grub2/util/grub.d/10_linux.in
index 5a78513..a8b8684 100644
--- a/grub2/util/grub.d/10_linux.in
+++ b/grub2/util/grub.d/10_linux.in
@@ -28,11 +28,10 @@ export TEXTDOMAINDIR="@localedir@"
 
 CLASS="--class gnu-linux --class gnu --class os"
 
-if [ "x${GRUB_DISTRIBUTOR}" = "x" ] ; then
-  OS=GNU/Linux
+if [ -r /etc/altlinux-release ]; then
+  OS=`cat /etc/altlinux-release | sed 's/ (.*$//g' | sed "s, $,,"`
 else
-  OS="${GRUB_DISTRIBUTOR} GNU/Linux"
-  CLASS="--class $(echo ${GRUB_DISTRIBUTOR} | tr 'A-Z' 'a-z' | cut -d' ' -f1|LC_ALL=C sed 's,[^[:alnum:]_],_,g') ${CLASS}"
+  OS="ALTLinux"
 fi
 
 # loop-AES arranges things so that /dev/loop/X can be our root device, but
@@ -46,7 +45,7 @@ esac
 # btrfs may reside on multiple devices. We cannot pass them as value of root= parameter
 # and mounting btrfs requires user space scanning, so force UUID in this case.
 if [ "x${GRUB_DEVICE_UUID}" = "x" ] || [ "x${GRUB_DISABLE_LINUX_UUID}" = "xtrue" ] \
-    || ! test -e "/dev/disk/by-uuid/${GRUB_DEVICE_UUID}" \
+    || ! blkid -U "${GRUB_DEVICE_UUID}" > /dev/null \
     || ( test -e "${GRUB_DEVICE}" && uses_abstraction "${GRUB_DEVICE}" lvm ); then
   LINUX_ROOT_DEVICE=${GRUB_DEVICE}
 else
@@ -82,9 +81,9 @@ linux_entry ()
   if [ x$type != xsimple ] ; then
       case $type in
 	  recovery)
-	      title="$(gettext_printf "%s, with Linux %s (recovery mode)" "${os}" "${version}")" ;;
+	      title="$(gettext_printf "%s, %s (recovery mode)" "${os}" "${version}")" ;;
 	  *)
-	      title="$(gettext_printf "%s, with Linux %s" "${os}" "${version}")" ;;
+	      title="$(gettext_printf "%s, %s" "${os}" "${version}")" ;;
       esac
       if [ x"$title" = x"$GRUB_ACTUAL_DEFAULT" ] || [ x"Previous Linux versions>$title" = x"$GRUB_ACTUAL_DEFAULT" ]; then
 	  replacement_title="$(echo "Advanced options for ${OS}" | sed 's,>,>>,g')>$(echo "$title" | sed 's,>,>>,g')"
@@ -150,12 +149,12 @@ machine=`uname -m`
 case "x$machine" in
     xi?86 | xx86_64)
 	list=
-	for i in /boot/vmlinuz-* /vmlinuz-* /boot/kernel-* ; do
+	for i in `ls -c1 /boot/vmlinuz /boot/vmlinu[z]-*`; do
 	    if grub_file_is_not_garbage "$i" ; then list="$list $i" ; fi
 	done ;;
     *) 
 	list=
-	for i in /boot/vmlinuz-* /boot/vmlinux-* /vmlinuz-* /vmlinux-* /boot/kernel-* ; do
+	for i in `ls -c1 /boot/vmlinuz /boot/vmlinu[xz]-*` ; do
                   if grub_file_is_not_garbage "$i" ; then list="$list $i" ; fi
 	done ;;
 esac
@@ -168,6 +167,9 @@ case "$machine" in
     *) GENKERNEL_ARCH="$machine" ;;
 esac
 
+[ ! -z "$GRUB_VMLINUZ_SYMLINKS" ] || GRUB_VMLINUZ_SYMLINKS="default"
+[ ! -z "$GRUB_VMLINUZ_FAILSAFE" ] || GRUB_VMLINUZ_FAILSAFE="default"
+
 prepare_boot_cache=
 prepare_root_cache=
 boot_device_id=
@@ -179,7 +181,7 @@ submenu_indentation=""
 
 is_top_level=true
 while [ "x$list" != "x" ] ; do
-  linux=`version_find_latest $list`
+  linux=`echo $list | sed 's, .*,,g'`
   gettext_printf "Found linux image: %s\n" "$linux" >&2
   basename=`basename $linux`
   dirname=`dirname $linux`
@@ -188,28 +190,47 @@ while [ "x$list" != "x" ] ; do
   alt_version=`echo $version | sed -e "s,\.old$,,g"`
   linux_root_device_thisversion="${LINUX_ROOT_DEVICE}"
 
+  if [ -L "$linux" ]; then
+    if [ "x$GRUB_VMLINUZ_SYMLINKS" = "xno" ] || [ "x$GRUB_VMLINUZ_SYMLINKS" = "xfalse" ]; then
+        echo "skipping symlink: $linux" >&2
+        list=`echo $list | tr ' ' '\n' | grep -vx $linux | tr '\n' ' '`
+        continue
+    fi
+    if [ "$linux" != "/boot/vmlinuz" ] && [ "x$GRUB_VMLINUZ_SYMLINKS" = "xdefault" ]; then
+       echo "skipping symlink: $linux" >&2
+       list=`echo $list | tr ' ' '\n' | grep -vx $linux | tr '\n' ' '`
+       continue
+    fi
+  fi
+
   initrd=
-  for i in "initrd.img-${version}" "initrd-${version}.img" "initrd-${version}.gz" \
-	   "initrd-${version}" "initramfs-${version}.img" \
-	   "initrd.img-${alt_version}" "initrd-${alt_version}.img" \
-	   "initrd-${alt_version}" "initramfs-${alt_version}.img" \
-	   "initramfs-genkernel-${version}" \
-	   "initramfs-genkernel-${alt_version}" \
-	   "initramfs-genkernel-${GENKERNEL_ARCH}-${version}" \
-	   "initramfs-genkernel-${GENKERNEL_ARCH}-${alt_version}"; do
+  default=false
+  linux_root_device_thisversion="${LINUX_ROOT_DEVICE}"
+  rel_dirname=`make_system_path_relative_to_its_root $dirname`
+  if [ x$linux != x/boot/vmlinuz ]; then
+  version=`echo $basename | sed -e "s,^vmlinuz-,,g"`
+  for i in "initrd-${version}.img" "initramfs-${version}.img"; do
     if test -e "${dirname}/${i}" ; then
       initrd="$i"
       break
     fi
   done
+  else
+  if [ -e /boot/initrd.img ]; then 
+    initrd="initrd.img"
+  fi
+    default=true
+  fi
 
   config=
-  for i in "${dirname}/config-${version}" "${dirname}/config-${alt_version}" "/etc/kernels/kernel-config-${version}" ; do
-    if test -e "${i}" ; then
-      config="${i}"
-      break
-    fi
-  done
+  if [ x$linux != x/boot/vmlinuz ]; then
+    for i in "${dirname}/config-${version}" "${dirname}/config-${alt_version}" "/etc/kernels/kernel-config-${version}" ; do
+       if test -e "${i}" ; then
+        config="${i}"
+        break
+       fi
+    done
+  fi
 
   initramfs=
   if test -n "${config}" ; then
@@ -226,7 +247,7 @@ while [ "x$list" != "x" ] ; do
 
   if [ "x$is_top_level" = xtrue ] && [ "x${GRUB_DISABLE_SUBMENU}" != xy ]; then
     linux_entry "${OS}" "${version}" simple \
-    "${GRUB_CMDLINE_LINUX} ${GRUB_CMDLINE_LINUX_DEFAULT}"
+    "${GRUB_CMDLINE_LINUX_DEFAULT}"
 
     submenu_indentation="$grub_tab"
     
@@ -239,10 +260,12 @@ while [ "x$list" != "x" ] ; do
   fi
 
   linux_entry "${OS}" "${version}" advanced \
-              "${GRUB_CMDLINE_LINUX} ${GRUB_CMDLINE_LINUX_DEFAULT}"
-  if [ "x${GRUB_DISABLE_RECOVERY}" != "xtrue" ]; then
-    linux_entry "${OS}" "${version}" recovery \
-                "single ${GRUB_CMDLINE_LINUX}"
+      "${GRUB_CMDLINE_LINUX_DEFAULT}" $default
+  if [ "x${GRUB_DISABLE_LINUX_RECOVERY}" != "xtrue" ] && [ "x${GRUB_VMLINUZ_FAILSAFE}" != "xno" ] && [ "x${GRUB_VMLINUZ_FAILSAFE}" != "xfalse" ]; then
+    if [ $linux = "/boot/vmlinuz" ] || [ "x${GRUB_VMLINUZ_FAILSAFE}" != "xdefault" ]; then
+      linux_entry "${OS}" "${version}" recovery \
+               "${GRUB_CMDLINE_LINUX}" $default
+    fi
   fi
 
   list=`echo $list | tr ' ' '\n' | fgrep -vx "$linux" | tr '\n' ' '`
